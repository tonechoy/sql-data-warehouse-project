/*
=================================================================
Quality Checks
=================================================================
Script Purpose:
    This script performs various quality checks for data consistency, accuracy, and standardization across the 'silver' schema. It includes checks for:
    - Null or duplicate primary keys.
    - Unwanted spaces in string fields.
    - Data standardization and consistency.
    - Invalid date ranges and orders.
    - Data consistency between related fields.

Usage Notes:
    - Run these checks after data loading Silver Layer.
    - Investigate and resolve any discrepancies found during the checks.
*/



--=================================================================
-- Checking 'silver.crm_cust_info'
--=================================================================
-- Check For Nulls or Duplicates in Primary key
-- Expectation: No result

SELECT cst_id, COUNT(*) AS count
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL
;

-- Check for unwanted Spaces
-- Expectation: No Result
SELECT cst_firstname, cst_lastname, cst_gndr
FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname) OR cst_lastname != TRIM(cst_lastname) OR cst_gndr != TRIM(cst_gndr);

-- Check gender quality
SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info


-------------------------------------------------------------
--=================================================================
-- Checking 'silver.crm_prd_info'
--=================================================================
SELECT *
FROM silver.crm_prd_info

-- Check For Nulls or Duplicates in Primary key
-- Expectation: No result

SELECT prd_id, COUNT(*) AS count
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL

-- Check for unwanted Spaces
-- Expectation: No Result
SELECT prd_nm, prd_key
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm) OR prd_key != TRIM(prd_key);

-- Check for NULLs or Negative Numbers
-- Expectation: No Result
SELECT *
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL


-- Check data quality
SELECT DISTINCT prd_line
FROM silver.crm_prd_info


-- Check for Invalid Date Orders
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt

--------------------------------------------------------
--=================================================================
-- Checking 'silver.crm_sales_details'
--=================================================================
SELECT *
FROM silver.crm_sales_details

--Check for invalid date orders
SELECT *
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_ship_dt > sls_due_dt
OR LEN(sls_order_dt) !=10 OR LEN(sls_ship_dt) !=10 OR LEN(sls_due_dt) !=10

--Check for invalid price / quantity / sales
SELECT *
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <=0 OR sls_quantity <=0 OR sls_price <=0


-----------------------------------------------------------
--=================================================================
-- Checking 'bronze.erp_cust_az12'
--=================================================================
--bronze.erp_cust_az12

--check for data matching with 2 tables
SELECT *
FROM bronze.erp_cust_az12

SELECT *
FROM silver.crm_cust_info

SELECT *
FROM bronze.erp_cust_az12
WHERE cid LIKE 'NAS%'

-- Check bdate validation
SELECT bdate
FROM bronze.erp_cust_az12
WHERE bdate < '1924-01-01' OR bdate > GETDATE()
ORDER BY bdate DESC

-- Check for data standardization & consistency
SELECT DISTINCT gen
FROM bronze.erp_cust_az12

SELECT DISTINCT
CASE 
	WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
	WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
	ELSE 'n/a'
END AS gen
FROM bronze.erp_cust_az12

SELECT
CASE
	WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
	ELSE cid
END AS cid,
CASE
	WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
END bdate,
CASE 
	WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
	WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
	ELSE 'n/a'
END AS gen
FROM bronze.erp_cust_az12


-----------------------------------------------------------
--=================================================================
-- Checking 'silver.erp_cust_az12'
--=================================================================
--silver.erp_cust_az12

SELECT *
FROM silver.erp_cust_az12

--check for data matching with 2 tables
SELECT cid
FROM silver.erp_cust_az12
WHERE cid NOT IN (SELECT cst_key FROM silver.crm_cust_info)

-- Check bdate validation
SELECT bdate
FROM silver.erp_cust_az12
WHERE bdate < '1924-01-01' OR bdate > GETDATE()
ORDER BY bdate DESC

-- Check for data standardization & consistency
SELECT DISTINCT gen
FROM silver.erp_cust_az12


--------------------------------------------------------------
--=================================================================
-- Checking 'bronze.erp_loc_a101'
--=================================================================
-- bronze.erp_loc_a101

-- Check duplicates
SELECT cid, COUNT(cid)
FROM bronze.erp_loc_a101
GROUP BY cid
HAVING COUNT(cid) > 1

-- Check data match between 2 tables
SELECT *
FROM bronze.erp_loc_a101

SELECT cst_key
FROM silver.crm_cust_info

SELECT
REPLACE(cid, '-', '') AS cid,
cntry
FROM bronze.erp_loc_a101

SELECT
REPLACE(cid, '-', '') AS cid
FROM bronze.erp_loc_a101
WHERE REPLACE(cid, '-', '') NOT IN (SELECT cst_key FROM silver.crm_cust_info)

-- Check for invalid country
SELECT DISTINCT cntry
FROM bronze.erp_loc_a101
ORDER BY cntry

SELECT DISTINCT
cntry AS old_cntry,
CASE
	WHEN UPPER(TRIM(cntry)) = 'DE' THEN 'Germany'
	WHEN UPPER(TRIM(cntry)) = 'UK' THEN 'United Kingdom'
	WHEN UPPER(TRIM(cntry)) = 'USA' OR UPPER(TRIM(cntry)) = 'US' THEN 'United States'
	WHEN UPPER(TRIM(cntry)) IS NULL OR UPPER(TRIM(cntry)) = '' THEN 'n/a'
	ELSE TRIM(cntry)
END AS cntry
FROM bronze.erp_loc_a101
ORDER BY cntry


--------------------------------------------------------------------
--=================================================================
-- Checking 'silver.erp_loc_a101'
--=================================================================
-- silver.erp_loc_a101

SELECT *
FROM silver.erp_loc_a101

-- Check duplicates
SELECT cid, COUNT(cid)
FROM silver.erp_loc_a101
GROUP BY cid
HAVING COUNT(cid) > 1

-- Check data match between 2 tables
SELECT
REPLACE(cid, '-', '') AS cid
FROM silver.erp_loc_a101
WHERE REPLACE(cid, '-', '') NOT IN (SELECT cst_key FROM silver.crm_cust_info)

-- Check for invalid country
SELECT DISTINCT cntry
FROM silver.erp_loc_a101
ORDER BY cntry


--------------------------------------------------------------
--=================================================================
-- Checking 'bronze.erp_px_cat_g1v2'
--=================================================================
-- bronze.erp_px_cat_g1v2
SELECT *
FROM bronze.erp_px_cat_g1v2

-- Check duplicates
SELECT *
FROM bronze.erp_px_cat_g1v2

SELECT *
FROM silver.crm_prd_info

SELECT id
FROM bronze.erp_px_cat_g1v2
WHERE id NOT IN (SELECT cat_id
FROM silver.crm_prd_info)

-- Check unwanted spaces
SELECT *
FROM bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance)

-- Check data standardization
SELECT DISTINCT subcat
FROM bronze.erp_px_cat_g1v2


--------------------------------------------------------
--=================================================================
-- Checking 'silver.erp_px_cat_g1v2'
--=================================================================
-- silver.erp_px_cat_g1v2

SELECT *
FROM silver.erp_px_cat_g1v2

-- Check duplicates
SELECT *
FROM silver.erp_px_cat_g1v2

SELECT *
FROM silver.crm_prd_info

SELECT id
FROM silver.erp_px_cat_g1v2
WHERE id NOT IN (SELECT cat_id
FROM silver.crm_prd_info)
